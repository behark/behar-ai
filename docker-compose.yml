version: '3.8'

services:
  # PostgreSQL database for production
  db:
    image: postgres:15-alpine
    container_name: ai-behar-postgres
    environment:
      POSTGRES_DB: dimensional_ai_prod
      POSTGRES_USER: ai_behar_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-your_secure_password_here}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_behar_user -d dimensional_ai_prod"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai-behar-network

  # FastAPI backend
  api:
    build:
      context: .
      dockerfile: Dockerfile.fastapi
    container_name: ai-behar-api
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      - API_HOST=0.0.0.0
      - PORT=8000
      - DATABASE_URL=postgresql://ai_behar_user:${DB_PASSWORD:-your_secure_password_here}@db:5432/dimensional_ai_prod
      - OLLAMA_BASE_URL=http://ollama:11434
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DEBUG=false
      - CORS_ALLOW_ORIGIN=${CORS_ALLOW_ORIGIN:-*}
    volumes:
      - ./databases:/app/databases
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ai-behar-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: ai-behar-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - ai-behar-network

  # Ollama LLM service
  ollama:
    image: ollama/ollama:latest
    container_name: ai-behar-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama-data:/root/.ollama
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 4G
    networks:
      - ai-behar-network

  # OpenWebUI
  openwebui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: ai-behar-openwebui
    ports:
      - "8080:8080"
    environment:
      - OLLAMA_BASE_URL=http://ollama:11434
      - WEBUI_SECRET_KEY=${WEBUI_SECRET_KEY:-change-this-secret}
      - CORS_ALLOW_ORIGIN=${CORS_ALLOW_ORIGIN:-*}
      - DATA_DIR=/app/backend/data
    volumes:
      - openwebui-data:/app/backend/data
    depends_on:
      - ollama
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ai-behar-network

  # Monitoring - Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-behar-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - ai-behar-network
    profiles:
      - monitoring

  # Monitoring - Grafana (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: ai-behar-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - ai-behar-network
    profiles:
      - monitoring

volumes:
  redis-data:
  ollama-data:
  openwebui-data:
  prometheus-data:
  grafana-data:
  postgres-data:

networks:
  ai-behar-network:
    driver: bridge
